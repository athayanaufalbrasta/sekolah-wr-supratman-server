generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_URL")
  directUrl = env("DIRECT_SUPABASE_URL")
}

// ----------------------------------------------------
// MODEL UTAMA (MASTER DATA)
// ----------------------------------------------------

model role {
  role_id         Int               @id @default(autoincrement())
  nama_role       String            @unique(map: "role_nama_role_unique") @db.VarChar(50)

  // Relasi Balik
  users           users[]
  role_permission role_permission[]
}

model role_permission {
  role_id       Int
  permission_id Int
  role          role       @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: Cascade, map: "role_permission_ibfk_1")
  permission    permission @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade, onUpdate: Cascade, map: "role_permission_ibfk_2")

  @@id([role_id, permission_id])
}

model permission {
  permission_id   Int               @id @default(autoincrement())
  nama_permission String            @unique(map: "permission_nama_permission_unique") @db.VarChar(50)
  grup            PermissionGrup?   // Kolom Grup Permission
  role_permission role_permission[]
}

model users {
  user_id         String    @id @default(uuid()) @db.Uuid
  username        String    @unique(map: "users_username_unique") @db.VarChar(100)
  email           String    @unique(map: "users_email_unique") @db.VarChar(150)
  password_hash   String    @db.VarChar(255)
  nama_lengkap    String    @db.VarChar(255)
  role_id         Int // PK role masih Int
  jabatan         String?   @db.VarChar(100)
  is_aktif        Boolean?  @default(true)
  created_at      DateTime? @default(now()) @db.Timestamp(3)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamp(3)

  nomor_telefon   String?   @db.VarChar(20)
  login_terakhir  DateTime? @db.Timestamp(3)
  foto_profil_url String?   @db.VarChar(255)
  is_verified     Boolean?  @default(false)

  // Relasi
  role role @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: Cascade, map: "users_ibfk_1")

  // Relasi Balik
  beritaPenulis  berita[]           @relation("BeritaPenulis")
  beritaEditor   berita[]           @relation("BeritaEditor")
  kegiatan       kegiatan[]
  kenaikan_kelas kenaikan_kelas[]
  pengumuman     pengumuman[]
  wali_kelas     kelas[]            @relation("WaliKelas")
  nilai_guru     nilai[]            @relation("NilaiGuru")

  @@index([role_id], map: "users_role_id_index")
}

model jenjang {
  jenjang_id     String           @id @default(uuid()) @db.Uuid
  nama_jenjang   String           @unique(map: "jenjang_nama_jenjang_unique") @db.VarChar(50)
  kode_jenjang   String           @unique(map: "jenjang_kode_jenjang_unique") @db.VarChar(10)

  // Relasi Balik
  mata_pelajaran mata_pelajaran[]
  siswa          siswa[]
  kelas          kelas[]
  pengumuman     pengumuman[]
}

model tahun_ajaran {
  ta_id         String                @id @default(uuid()) @db.Uuid
  tahun_mulai   Int
  tahun_selesai Int
  semester      tahun_ajaran_semester
  is_aktif      Boolean?              @default(false)

  // Relasi Balik
  kelas          kelas[]
  nilai          nilai[]
  kenaikan_kelas kenaikan_kelas[]

  @@unique([tahun_mulai, semester], map: "tahun_ajaran_tahun_mulai_semester_unique")
}

// ----------------------------------------------------
// MODEL AKADEMIK
// ----------------------------------------------------

model mata_pelajaran {
  mapel_id   String    @id @default(uuid()) @db.Uuid
  nama_mapel String    @db.VarChar(150)
  kode_mapel String?   @unique(map: "mapel_kode_mapel_unique") @db.VarChar(10)
  jenjang_id String    @db.Uuid

  // Relasi
  jenjang jenjang @relation(fields: [jenjang_id], references: [jenjang_id], onDelete: Cascade, onUpdate: Cascade, map: "mata_pelajaran_ibfk_1")

  // Relasi Balik
  nilai nilai[]

  @@index([jenjang_id], map: "mapel_jenjang_id_index")
}

model kelas {
  kelas_id        String    @id @default(uuid()) @db.Uuid
  nama_kelas      String    @db.VarChar(100)
  level_id        String    @db.Uuid // FK ke jenjang.jenjang_id (String/UUID)
  ta_id           String    @db.Uuid // FK ke tahun_ajaran.ta_id (String/UUID)
  wali_kelas_id   String?   @db.Uuid // FK ke users.user_id (String/UUID)

  // Relasi
  jenjang      jenjang      @relation(fields: [level_id], references: [jenjang_id])
  wali_kelas   users?       @relation("WaliKelas", fields: [wali_kelas_id], references: [user_id], onDelete: SetNull, onUpdate: Cascade)
  tahun_ajaran tahun_ajaran @relation(fields: [ta_id], references: [ta_id], onDelete: Cascade, onUpdate: Cascade, map: "kelas_ibfk_1")

  // Relasi Balik
  nilai                 nilai[]
  kenaikan_kelas_asal   kenaikan_kelas[] @relation("KelasAsal")
  kenaikan_kelas_tujuan kenaikan_kelas[] @relation("KelasTujuan")

  @@unique([nama_kelas, level_id, ta_id], map: "kelas_unique_per_ta")
  @@index([ta_id], map: "kelas_ta_id_index")
  @@index([level_id], map: "kelas_level_id_index")
  @@index([wali_kelas_id], map: "kelas_wali_kelas_id_index")
}

model siswa {
  siswa_id       String    @id @default(uuid()) @db.Uuid
  nis            String    @unique(map: "siswa_nis_unique") @db.VarChar(20)
  nisn           String?   @unique(map: "siswa_nisn_unique") @db.VarChar(20)
  nama_lengkap   String    @db.VarChar(255)
  jenis_kelamin  Gender?
  jenjang_id     String    @db.Uuid // FK ke jenjang.jenjang_id (String/UUID)
  tempat_lahir   String?   @db.VarChar(150)
  tgl_lahir      DateTime? @db.Date
  agama          Agama?
  gol_darah      GolDarah?
  anak_ke        Int?
  jumlah_saudara Int?
  alamat         String?   @db.Text

  // Relasi
  jenjang jenjang @relation(fields: [jenjang_id], references: [jenjang_id])
  // Relasi Balik
  orang_tua      orang_tua[]
  nilai          nilai[]
  kenaikan_kelas kenaikan_kelas[]
  dokumen_siswa  dokumen_siswa[]

  @@index([jenjang_id], map: "siswa_jenjang_id_index")
}

model dokumen_siswa {
  dokumen_siswa_id String       @id @default(uuid()) @db.Uuid
  siswa_id         String       @db.Uuid // FK WAJIB ke siswa.siswa_id
  nama_dokumen     String       @db.VarChar(255)
  file             String       @db.VarChar(255)
  jenis_dokumen    JenisDokumen

  // Relasi: Menggunakan siswa_id sebagai FK
  siswa siswa @relation(fields: [siswa_id], references: [siswa_id])

  @@index([siswa_id])
}

model orang_tua {
  orang_tua_id         String    @id @default(uuid()) @db.Uuid
  siswa_id             String    @db.Uuid // TAMBAHAN: FK WAJIB ke siswa.siswa_id
  nama                 String    @db.VarChar(150)
  tempat_lahir         String?   @db.VarChar(150)
  tgl_lahir            DateTime?
  agama                Agama?
  pendidikan_tertinggi String?   @db.VarChar(150)
  alamat               String?   @db.Text
  pekerjaan            String?   @db.VarChar(150)
  nomor_hp             String?   @db.VarChar(20)

  // Relasi
  siswa siswa @relation(fields: [siswa_id], references: [siswa_id])

  @@index([siswa_id])
}

model nilai {
  nilai_id        String    @id @default(uuid()) @db.Uuid
  siswa_id        String    @db.Uuid // FK ke siswa.siswa_id (String/UUID)
  mapel_id        String    @db.Uuid // FK ke mata_pelajaran.mapel_id (String/UUID)
  kelas_id        String    @db.Uuid // FK ke kelas.kelas_id (String/UUID)
  ta_id           String    @db.Uuid // FK ke tahun_ajaran.ta_id (String/UUID)
  nilai_tugas     Decimal?  @db.Decimal(5, 2)
  nilai_uts       Decimal?  @db.Decimal(5, 2)
  nilai_uas       Decimal?  @db.Decimal(5, 2)
  nilai_akhir     Decimal   @db.Decimal(5, 2)
  nilai_huruf     String?   @db.Char(2)
  deskripsi_rapor String?   @db.Text
  guru_id         String    @db.Uuid // FK ke users.user_id (String/UUID)
  input_at        DateTime? @default(now()) @db.Timestamp(3)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamp(3)

  // Relasi
  siswa          siswa          @relation(fields: [siswa_id], references: [siswa_id])
  mata_pelajaran mata_pelajaran @relation(fields: [mapel_id], references: [mapel_id])
  kelas          kelas          @relation(fields: [kelas_id], references: [kelas_id])
  tahun_ajaran   tahun_ajaran   @relation(fields: [ta_id], references: [ta_id])
  guru           users          @relation("NilaiGuru", fields: [guru_id], references: [user_id])

  @@unique([siswa_id, mapel_id, ta_id], map: "nilai_siswa_mapel_ta_unique")
  @@index([siswa_id], map: "nilai_siswa_id_index")
  @@index([mapel_id], map: "nilai_mapel_id_index")
  @@index([kelas_id], map: "nilai_kelas_id_index")
  @@index([ta_id], map: "nilai_ta_id_index")
  @@index([guru_id], map: "nilai_guru_id_index")
}

model kenaikan_kelas {
  kenaikan_id       String                       @id @default(uuid()) @db.Uuid
  siswa_id          String                       @db.Uuid // FK ke siswa.siswa_id (String/UUID)
  ta_id             String                       @db.Uuid // FK ke tahun_ajaran.ta_id (String/UUID)
  kelas_asal_id     String                       @db.Uuid // FK ke kelas.kelas_id (String/UUID)
  kelas_tujuan_id   String?                      @db.Uuid // FK ke kelas.kelas_id (String/UUID)
  status_kenaikan   kenaikan_kelas_status_kenaikan
  keterangan        String?                      @db.Text
  tanggal_proses    DateTime                     @db.Date
  user_proses_id    String                       @db.Uuid // FK ke users.user_id (String/UUID)

  // Relasi
  users          users        @relation(fields: [user_proses_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade, map: "kenaikan_kelas_ibfk_1")
  siswa          siswa        @relation(fields: [siswa_id], references: [siswa_id])
  tahun_ajaran   tahun_ajaran @relation(fields: [ta_id], references: [ta_id])
  kelas_asal     kelas        @relation("KelasAsal", fields: [kelas_asal_id], references: [kelas_id])
  kelas_tujuan   kelas?       @relation("KelasTujuan", fields: [kelas_tujuan_id], references: [kelas_id])

  @@index([user_proses_id], map: "kenaikan_kelas_user_proses_id_index")
  @@index([siswa_id], map: "kenaikan_kelas_siswa_id_index")
  @@index([ta_id], map: "kenaikan_kelas_ta_id_index")
  @@index([kelas_asal_id], map: "kenaikan_kelas_kelas_asal_id_index")
  @@index([kelas_tujuan_id], map: "kenaikan_kelas_kelas_tujuan_id_index")
}

// ----------------------------------------------------
// MODEL KONTEN WEBSITE
// ----------------------------------------------------

model kategori_berita {
  kategori_id   String  @id @default(uuid()) @db.Uuid
  nama_kategori String  @unique(map: "kb_nama_kategori_unique") @db.VarChar(100)
  deskripsi     String? @db.VarChar(255)

  // Relasi Balik
  berita berita[]
}

model berita {
  berita_id         String            @id @default(uuid()) @db.Uuid
  judul             String            @db.VarChar(255)
  slug              String            @unique(map: "berita_slug_unique") @db.VarChar(255)
  ringkasan         String?           @db.Text
  konten_lengkap    String
  kategori_id       String?           @db.Uuid // FK ke kategori_berita.kategori_id (String/UUID)
  gambar_utama      String?           @db.VarChar(255)
  tanggal_publikasi DateTime          @db.Timestamp(3)
  is_published      Boolean?          @default(true)
  penulis_user_id   String            @db.Uuid // FK ke users.user_id (String/UUID)
  tags              String?           @db.VarChar(255)
  views_count       Int?              @default(0)
  is_featured       Boolean?          @default(true)
  created_at        DateTime?         @default(now()) @db.Timestamp(3)
  updated_at        DateTime          @default(now()) @updatedAt @db.Timestamp(3)
  editor_user_id    String?           @db.Uuid // FK ke users.user_id (String/UUID)

  // Relasi
  kategori kategori_berita? @relation(fields: [kategori_id], references: [kategori_id], onDelete: SetNull, onUpdate: Cascade)
  penulis  users            @relation("BeritaPenulis", fields: [penulis_user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade, map: "berita_ibfk_1")
  editor   users?           @relation("BeritaEditor", fields: [editor_user_id], references: [user_id], onDelete: SetNull, onUpdate: Cascade)

  @@index([penulis_user_id], map: "berita_penulis_user_id_index")
  @@index([editor_user_id], map: "berita_editor_user_id_index")
  @@index([kategori_id], map: "berita_kategori_id_index")
}

model kategori_kegiatan {
  kategori_id   String  @id @default(uuid()) @db.Uuid
  nama_kategori String  @unique(map: "kk_nama_kategori_unique") @db.VarChar(100)
  deskripsi     String? @db.VarChar(255)

  // Relasi Balik
  kegiatan kegiatan[]
}

model kegiatan {
  kegiatan_id     String           @id @default(uuid()) @db.Uuid
  judul           String           @db.VarChar(255)
  slug            String           @unique(map: "kegiatan_slug_unique") @db.VarChar(255)
  tanggal_mulai   DateTime         @db.Timestamp(3)
  tanggal_selesai DateTime?        @db.Timestamp(3)
  lokasi          String           @db.VarChar(255)
  deskripsi       String?          @db.Text
  kategori_id     String?          @db.Uuid // FK ke kategori_kegiatan.kategori_id (String/UUID)
  gambar_utama    String?          @db.VarChar(255)
  status          kegiatan_status? @default(Akan_Datang)
  penulis_user_id String           @db.Uuid // FK ke users.user_id (String/UUID)
  created_at      DateTime?        @default(now()) @db.Timestamp(3)
  updated_at      DateTime?        @default(now()) @updatedAt @db.Timestamp(3)
  is_featured     Boolean?         @default(false)

  // Relasi
  users    users            @relation(fields: [penulis_user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade, map: "kegiatan_ibfk_1")
  kategori kategori_kegiatan? @relation(fields: [kategori_id], references: [kategori_id], onDelete: SetNull, onUpdate: Cascade)

  @@index([penulis_user_id], map: "kegiatan_penulis_user_id_index")
  @@index([kategori_id], map: "kegiatan_kategori_id_index")
}

model pengumuman {
  pengumuman_id       String    @id @default(uuid()) @db.Uuid
  judul               String    @db.VarChar(255)
  pesan_singkat       String    @db.Text
  konten_lengkap      String?   @db.Text
  tanggal_penting     DateTime? @db.Date
  is_sticky           Boolean?  @default(false)
  masa_berlaku_sampai DateTime? @db.Timestamp(3)
  audiens_jenjang_id  String?   @db.Uuid // FK ke jenjang.jenjang_id (String/UUID)
  penulis_user_id     String    @db.Uuid // FK ke users.user_id (String/UUID)
  created_at          DateTime? @default(now()) @db.Timestamp(3)
  updated_at          DateTime? @default(now()) @updatedAt @db.Timestamp(3)

  // Relasi
  users   users    @relation(fields: [penulis_user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade, map: "pengumuman_ibfk_1")
  jenjang jenjang? @relation(fields: [audiens_jenjang_id], references: [jenjang_id])

  @@index([penulis_user_id], map: "pengumuman_penulis_user_id_index")
  @@index([audiens_jenjang_id], map: "pengumuman_audiens_jenjang_id_index")
}

model konten_web {
  konten_id    String  @id @default(uuid()) @db.Uuid
  konten_key   String  @db.Text
  konten_value String? @db.Text
}

model galleries {
  pic_id      String    @id @default(uuid()) @db.Uuid
  folder_name String    @db.VarChar(255)
  pic_name    String    @db.VarChar(255)
  caption     String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(3)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamp(3)
}


enum Gender {
  Laki_Laki @map("Laki-Laki")
  Perempuan
}

enum prestasi_tingkat {
  Sekolah
  Kabupaten
  Provinsi
  Nasional
  Internasional
}

enum tahun_ajaran_semester {
  Ganjil
  Genap
}

enum kenaikan_kelas_status_kenaikan {
  Naik
  Lulus
  Tinggal
}

enum prestasi_tipe_penerima {
  Siswa
  Guru
  Sekolah
}

enum kegiatan_status {
  Akan_Datang @map("Akan Datang")
  Berlangsung
  Selesai
  Dibatalkan
}

enum Agama {
  Islam
  Kristen
  Katolik
  Hindu
  Budha
  Konghucu
  Lainnya
}

enum GolDarah {
  A
  B
  AB
  O
}

enum JenisDokumen {
  AkteKelahiran
  KartuKeluarga
  BuktiTransfer
}

enum PermissionGrup {
  dashboard
  user
  siswa
  guru
  kelas
  mapel
  nilai
  media
  berita
  pengumuman
}
